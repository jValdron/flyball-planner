# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The attendance status of a dog for a practice"""
enum AttendanceStatus {
  Attending
  NotAttending
  Unknown
}

input AttendanceUpdate {
  attending: AttendanceStatus!
  dogId: ID!
}

type Club {
  createdAt: DateTimeISO!

  """Default practice time in 24-hour format (HH:mm)"""
  defaultPracticeTime: String!
  dogs: [Dog!]!
  id: ID!
  nafaClubNumber: String!
  name: String!
  practices: [Practice!]!
  updatedAt: DateTimeISO!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Dog {
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  crn: String
  id: ID!
  name: String!
  owner: Handler!
  ownerId: ID!
  status: DogStatus!
  trainingLevel: Int!
  updatedAt: DateTimeISO!
}

"""The status of a dog"""
enum DogStatus {
  Active
  Inactive
}

type Handler {
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  dogs: [Dog!]!
  givenName: String!
  id: ID!
  surname: String!
  updatedAt: DateTimeISO!
}

type Mutation {
  createClub(name: String!): Club!
  createDog(clubId: String!, crn: String, name: String!, ownerId: String!, status: DogStatus!, trainingLevel: Float!): Dog!
  createHandler(clubId: ID!, givenName: String!, surname: String!): Handler!
  createPractice(clubId: String!, scheduledAt: DateTimeISO!, status: PracticeStatus!): Practice!
  deleteClub(id: String!): Boolean!
  deleteDog(id: String!): Boolean!
  deleteHandler(id: String!): Boolean!
  deletePractice(id: String!): Boolean!
  updateAttendances(practiceId: String!, updates: [AttendanceUpdate!]!): [PracticeAttendance!]!
  updateClub(id: String!, name: String): Club
  updateDog(clubId: String, crn: String, id: String!, name: String, ownerId: String, status: DogStatus, trainingLevel: Float): Dog
  updateHandler(givenName: String, id: String!, surname: String): Handler
  updatePractice(clubId: String, id: String!, scheduledAt: DateTimeISO, status: PracticeStatus): Practice
}

type Practice {
  attendances: [PracticeAttendance!]!
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  id: ID!
  scheduledAt: DateTimeISO!
  sets: [Set!]!
  status: PracticeStatus!
  updatedAt: DateTimeISO!
}

type PracticeAttendance {
  attending: AttendanceStatus!
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  practice: Practice!
  practiceId: ID!
  updatedAt: DateTimeISO!
}

"""The status of a practice"""
enum PracticeStatus {
  Draft
  Ready
}

type Query {
  activeDogsInClub(clubId: ID!): Int!
  club(id: String!): Club
  clubs: [Club!]!
  dog(id: String!): Dog
  dogs: [Dog!]!
  dogsByHandlersInClub(clubId: ID!): [Handler!]
  handler(id: String!): Handler
  handlers: [Handler!]!
  practice(id: String!): Practice
  practiceAttendances(practiceId: String!): [PracticeAttendance!]!
  practices: [Practice!]!
  practicesByClub(clubId: String!): [Practice!]!
}

type Set {
  createdAt: DateTimeISO!
  id: ID!
  practice: Practice!
  practiceId: ID!
  setDogs: [SetDog!]!
  updatedAt: DateTimeISO!
}

type SetDog {
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  set: Set!
  setId: ID!
  updatedAt: DateTimeISO!
}