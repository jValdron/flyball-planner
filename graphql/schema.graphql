# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The attendance status of a dog for a practice"""
enum AttendanceStatus {
  Attending
  NotAttending
  Unknown
}

input AttendanceUpdate {
  attending: AttendanceStatus!
  dogId: ID!
}

type Club {
  createdAt: DateTimeISO!

  """Default practice time in 24-hour format (HH:mm)"""
  defaultPracticeTime: String!
  dogs: [Dog!]!
  handlers: [Handler!]!
  id: ID!

  """Ideal number of sets per dog for this club"""
  idealSetsPerDog: Float!
  locations: [Location!]!
  nafaClubNumber: String!
  name: String!
  updatedAt: DateTimeISO!
  userInvites: [UserInvite!]!
  users: [User!]!
}

type ClubEvent {
  club: Club!
  eventType: EventType!
}

input CreateDogNoteInput {
  clubId: ID!
  content: String!
  dogId: ID!
  isPrivate: Boolean! = false
}

input CreateSetDogNoteInput {
  clubId: ID!
  content: String!
  dogIds: [ID!]!
  isPrivate: Boolean! = false
  setDogId: ID!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Dog {
  club: Club
  clubId: ID!
  createdAt: DateTimeISO!
  crn: String
  id: ID!
  name: String!
  notes: [DogNote!]!
  owner: Handler
  ownerId: ID!
  status: DogStatus!
  trainingLevel: TrainingLevel!
  updatedAt: DateTimeISO!
}

type DogEvent {
  dog: Dog!
  eventType: EventType!
}

type DogNote {
  content: String!
  createdAt: DateTimeISO!
  createdBy: User!
  createdById: ID!
  dog: Dog!
  dogId: ID!
  id: ID!
  isPrivate: Boolean!
  setDogNotes: [SetDogNote!]
  setDogs: [SetDog!]!
  updatedAt: DateTimeISO!
}

type DogNoteEvent {
  content: String!
  createdAt: DateTimeISO!
  dogId: String!
  eventType: EventType!
  id: String!
  updatedAt: DateTimeISO!
}

"""The status of a dog"""
enum DogStatus {
  Active
  Inactive
}

"""The type of event that occurred"""
enum EventType {
  CREATED
  DELETED
  UPDATED
}

type Handler {
  club: Club
  clubId: ID!
  createdAt: DateTimeISO!
  dogs: [Dog!]
  givenName: String!
  id: ID!
  surname: String!
  updatedAt: DateTimeISO!
}

type HandlerEvent {
  eventType: EventType!
  handler: Handler!
}

"""The lane that the set is being performed in"""
enum Lane {
  Left
  Right
}

type Location {
  club: Club
  clubId: ID!
  createdAt: DateTimeISO!
  id: ID!
  isDefault: Boolean!
  isDoubleLane: Boolean!
  name: String!
  updatedAt: DateTimeISO!
}

type LocationEvent {
  eventType: EventType!
  location: Location!
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  acceptUserInvite(code: String!, firstName: String!, lastName: String!, password: String!, username: String!): User!
  changePassword(currentPassword: String!, newPassword: String!): Boolean!
  createDog(clubId: String!, crn: String, name: String!, ownerId: String!, status: DogStatus!, trainingLevel: TrainingLevel!): Dog!
  createDogNote(input: CreateDogNoteInput!): DogNote!
  createHandler(clubId: ID!, givenName: String!, surname: String!): Handler!
  createLocation(clubId: ID!, isDefault: Boolean, isDoubleLane: Boolean, name: String!): Location!
  createPractice(clubId: String!, isPrivate: Boolean! = false, scheduledAt: DateTimeISO!, status: PracticeStatus!): Practice!
  createSetDogNote(input: CreateSetDogNoteInput!): DogNote!
  createUserInvite(clubId: String!, email: String!): UserInvite!
  deleteClub(id: String!): Boolean!
  deleteDog(id: String!): Boolean!
  deleteDogNote(id: ID!): Boolean!
  deleteHandler(id: String!): Boolean!
  deleteLocation(id: String!): Boolean!
  deletePractice(id: String!): Boolean!
  deleteSets(ids: [String!]!): Boolean!
  loginUser(password: String!, username: String!): LoginResponse!
  removeUserFromClub(clubId: String!, userId: String!): Boolean!
  updateAttendances(practiceId: String!, updates: [AttendanceUpdate!]!): [PracticeAttendance!]!
  updateClub(defaultPracticeTime: String, id: String!, idealSetsPerDog: Float, nafaClubNumber: String, name: String): Club
  updateDog(crn: String, id: String!, name: String, ownerId: String, status: DogStatus, trainingLevel: TrainingLevel): Dog
  updateDogNote(content: String, id: ID!, isPrivate: Boolean): DogNote
  updateHandler(givenName: String, id: String!, surname: String): Handler
  updateLocation(id: String!, isDefault: Boolean, isDoubleLane: Boolean, name: String): Location
  updatePractice(id: String!, isPrivate: Boolean, scheduledAt: DateTimeISO, status: PracticeStatus): Practice
  updateSets(updates: [SetUpdate!]!): [Set!]!
  updateUser(email: String, firstName: String, lastName: String): User!
}

type Practice {
  attendances: [PracticeAttendance!]!
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  id: ID!
  isPrivate: Boolean!
  plannedBy: User!
  plannedById: ID!
  scheduledAt: DateTimeISO!
  sets: [Set!]!
  shareCode: String
  status: PracticeStatus!
  updatedAt: DateTimeISO!
}

type PracticeAttendance {
  attending: AttendanceStatus!
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  practice: Practice!
  practiceId: ID!
  updatedAt: DateTimeISO!
}

type PracticeAttendanceEvent {
  attendance: PracticeAttendance!
  eventType: EventType!
}

type PracticeDogNote {
  content: String!
  createdAt: DateTimeISO!
  createdBy: User!
  dogIds: [String!]!
  id: String!
  isPrivate: Boolean!
  setId: String!
  updatedAt: DateTimeISO!
}

type PracticeDogNoteEvent {
  content: String!
  dogIds: [String!]!
  eventType: EventType!
  id: String!
  practiceId: String!
  setId: String!
}

type PracticeEvent {
  eventType: EventType!
  practice: Practice!
}

type PracticeSetEvent {
  eventType: EventType!
  set: Set!
}

type PracticeSetRatingEvent {
  eventType: EventType!
  practiceId: String!
  rating: SetRating
  setId: String!
}

"""The status of a practice"""
enum PracticeStatus {
  Draft
  Ready
}

type PracticeSummary {
  attendingCount: Float!
  clubId: String!
  id: String!
  isPrivate: Boolean!
  notAttendingCount: Float!
  plannedBy: User!
  scheduledAt: DateTimeISO!
  setsCount: Float!
  status: PracticeStatus!
  unconfirmedCount: Float!
}

type PracticeSummaryEvent {
  eventType: EventType!
  practice: PracticeSummary!
}

type Query {
  activeDogsInClub(clubId: ID!): Int!
  club(id: String!): Club
  clubs: [Club!]!
  currentUser: User!
  dog(id: String!): Dog
  dogNotes(dogId: ID!): [DogNote!]!
  dogNotesByPractice(orderBy: String! = "createdAt_DESC", practiceId: ID!): [PracticeDogNote!]!
  dogs: [Dog!]!
  dogsByHandlersInClub(clubId: ID!): [Handler!]
  handler(id: String!): Handler
  handlers: [Handler!]!
  location(id: String!): Location
  locations: [Location!]!
  locationsByClub(clubId: ID!): [Location!]!
  me: User!
  practice(id: String!): Practice
  practiceAttendances(practiceId: String!): [PracticeAttendance!]!
  practiceSummariesByClub(clubId: String!): [PracticeSummary!]!
  publicPractice(code: String!, id: String!): Practice
  set(id: String!): Set
  sets(practiceId: String!): [Set!]!
  user(id: String!): User
  userInviteByCode(code: String!): UserInvite
  userInvitesByClub(clubId: String!): [UserInvite!]!
  users: [User!]!
  usersByClub(clubId: String!): [User!]!
}

type Set {
  createdAt: DateTimeISO!
  dogs: [SetDog!]!
  id: ID!
  index: Float!
  isWarmup: Boolean!
  location: Location!
  locationId: ID!
  notes: String
  practice: Practice!
  practiceId: ID!
  rating: SetRating
  type: SetType
  typeCustom: String
  updatedAt: DateTimeISO!
}

type SetDog {
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  index: Float!
  lane: Lane
  set: Set!
  setDogNotes: [SetDogNote!]!
  setId: ID!
  updatedAt: DateTimeISO!
}

type SetDogNote {
  createdAt: DateTimeISO!
  dogNote: DogNote!
  dogNoteId: ID!
  id: ID!
  setDog: SetDog!
  setDogId: ID!
  updatedAt: DateTimeISO!
}

input SetDogUpdate {
  dogId: ID
  index: Float
  lane: Lane
}

"""The rating for a set performance"""
enum SetRating {
  Bad
  Good
  Neutral
}

"""The type of set being performed"""
enum SetType {
  AroundTheWorld
  BoxWork
  Custom
  FullRuns
  PowerJumping
  Restraints
  ReverseSnapoffs
  Snapoffs
  TwoJumpsFlyball
}

input SetUpdate {
  dogs: [SetDogUpdate!]
  id: ID
  index: Float
  isWarmup: Boolean
  locationId: ID
  notes: String
  practiceId: ID
  rating: SetRating
  type: SetType
  typeCustom: String
}

type Subscription {
  clubById(clubId: String): ClubEvent!
  clubChanged: ClubEvent!
  dogChanged(clubId: String): DogEvent!
  dogNoteChanged(dogId: String!): DogNoteEvent!
  handlerChanged(clubId: String): HandlerEvent!
  locationChanged(clubId: String): LocationEvent!
  practiceAttendanceChanged(practiceId: String!): PracticeAttendanceEvent!
  practiceChanged(practiceId: String!): PracticeEvent!
  practiceDogNoteChanged(practiceId: String!): PracticeDogNoteEvent!
  practiceSetChanged(practiceId: String!): PracticeSetEvent!
  practiceSetRatingChanged(practiceId: String!): PracticeSetRatingEvent!
  practiceSummaryChanged(clubId: String!): PracticeSummaryEvent!
}

"""The training level of a dog"""
enum TrainingLevel {
  Advanced
  Beginner
  Intermediate
  Novice
  Solid
}

type User {
  clubs: [Club!]!
  createdAt: DateTimeISO!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTimeISO!
  username: String!
}

type UserInvite {
  club: Club!
  clubId: String!
  code: String!
  createdAt: DateTimeISO!
  email: String!
  expiresAt: DateTimeISO!
  id: ID!
  invitedBy: User
  invitedById: String
  isExpired: Boolean!
  isUsed: Boolean!
  isValid: Boolean!
  updatedAt: DateTimeISO!
  usedAt: DateTimeISO
  usedBy: User
  usedById: String
}