# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The attendance status of a dog for a practice"""
enum AttendanceStatus {
  ATTENDING
  NOT_ATTENDING
  UNKNOWN
}

type Club {
  createdAt: DateTimeISO!
  dogs: [Dog!]!
  id: ID!
  name: String!
  practices: [Practice!]!
  updatedAt: DateTimeISO!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Dog {
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  crn: String
  id: ID!
  name: String!
  owner: Owner!
  ownerId: ID!
  status: DogStatus!
  trainingLevel: Int!
  updatedAt: DateTimeISO!
}

"""The status of a dog"""
enum DogStatus {
  Active
  Inactive
}

type Mutation {
  createDog(clubId: String!, crn: String, name: String!, ownerId: String!, status: String!, trainingLevel: Float!): Dog!
  createOwner(name: String!): Owner!
  deleteDog(id: String!): Boolean!
  deleteOwner(id: String!): Boolean!
  updateDog(clubId: String, crn: String, id: String!, name: String, ownerId: String, status: String, trainingLevel: Float): Dog
  updateOwner(id: String!, name: String): Owner
}

type Owner {
  createdAt: DateTimeISO!
  dogs: [Dog!]!
  id: ID!
  name: String!
  updatedAt: DateTimeISO!
}

type Practice {
  attendances: [PracticeAttendance!]!
  club: Club!
  clubId: ID!
  createdAt: DateTimeISO!
  id: ID!
  scheduledAt: DateTimeISO!
  sets: [Set!]!
  status: PracticeStatus!
  updatedAt: DateTimeISO!
}

type PracticeAttendance {
  attending: AttendanceStatus!
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  practice: Practice!
  practiceId: ID!
  updatedAt: DateTimeISO!
}

"""The status of a practice"""
enum PracticeStatus {
  Draft
  Ready
}

type Query {
  dog(id: String!): Dog
  dogs: [Dog!]!
  owner(id: String!): Owner
  owners: [Owner!]!
}

type Set {
  createdAt: DateTimeISO!
  id: ID!
  practice: Practice!
  practiceId: ID!
  setDogs: [SetDog!]!
  updatedAt: DateTimeISO!
}

type SetDog {
  createdAt: DateTimeISO!
  dog: Dog!
  dogId: ID!
  id: ID!
  set: Set!
  setId: ID!
  updatedAt: DateTimeISO!
}