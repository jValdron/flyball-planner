name: Release New Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      message:
        description: 'Optional release message for annotated tag (supports multi-line text)'
        required: false
        type: string
        default: 'Release version'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.2.3)"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if version already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "❌ Tag v$VERSION already exists!"
            exit 1
          fi
          echo "✅ Version v$VERSION is available"

      - name: Update frontend package.json
        run: |
          VERSION="${{ github.event.inputs.version }}"
          jq --arg version "$VERSION" '.version = $version' frontend/package.json > frontend/package.json.tmp
          mv frontend/package.json.tmp frontend/package.json
          echo "✅ Updated frontend package.json to version $VERSION"

      - name: Update graphql package.json
        run: |
          VERSION="${{ github.event.inputs.version }}"
          jq --arg version "$VERSION" '.version = $version' graphql/package.json > graphql/package.json.tmp
          mv graphql/package.json.tmp graphql/package.json
          echo "✅ Updated graphql package.json to version $VERSION"

      - name: Commit version updates
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add frontend/package.json graphql/package.json

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "⏭️ No changes to commit - versions already match"
          else
            git commit -m "Bump version to ${{ github.event.inputs.version }}"
            echo "✅ Committed version updates"
          fi

      - name: Push version updates first
        run: |
          # Check if there are any commits to push
          if git diff HEAD origin/main --quiet; then
            echo "⏭️ No commits to push - main branch is up to date"
          else
            git push origin main
            echo "✅ Pushed version updates to main branch"
          fi

      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MESSAGE="${{ github.event.inputs.message }}"

          if [ -n "$MESSAGE" ] && [ "$MESSAGE" != "Release version" ]; then
            # Create annotated tag with custom message
            # Write message to temp file to preserve newlines
            echo "$MESSAGE" > /tmp/tag_message.txt
            git tag -a "v$VERSION" -F /tmp/tag_message.txt
            echo "✅ Created annotated tag v$VERSION with message:"
            echo "$MESSAGE"
            rm /tmp/tag_message.txt
          else
            # Create lightweight tag
            git tag "v$VERSION"
            echo "✅ Created lightweight tag v$VERSION"
          fi

          git push origin "v$VERSION"
          echo "✅ Pushed tag v$VERSION to remote"

      - name: Trigger build workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-build
          client-payload: '{"ref":"v${{ github.event.inputs.version }}"}'

      - name: Trigger Helm publish workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-helm
          client-payload: '{"ref":"v${{ github.event.inputs.version }}"}'

      - name: Create GitHub Release
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MESSAGE="${{ github.event.inputs.message }}"

          # Create release body with proper multi-line handling
          cat > /tmp/release_body.md << EOF
          ## What's Changed
          - Updated frontend to version $VERSION
          - Updated graphql to version $VERSION

          ## Docker Images
          - \`ghcr.io/${{ github.repository }}/frontend:v$VERSION\`
          - \`ghcr.io/${{ github.repository }}/graphql:v$VERSION\`

          ## Helm Chart
          - Chart version updated with appVersion v$VERSION

          ## Release Notes
          $MESSAGE
          EOF

          # Create the release using GitHub CLI
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes-file /tmp/release_body.md \
            --draft=false \
            --prerelease=false

          rm /tmp/release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "🎉 Release v${{ github.event.inputs.version }} has been created!"
          echo "📦 Package versions updated in both frontend and graphql"
          echo "🏷️  Git tag v${{ github.event.inputs.version }} created and pushed"
          echo "🚀 This will trigger automated builds and chart publishing"
