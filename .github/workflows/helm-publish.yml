name: Publish Helm Chart

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-helm]

jobs:
  publish-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      IS_TAG_OR_DISPATCH: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'repository_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Get chart version
        id: chart-version
        run: |
          CHART_VERSION=$(helm show chart deploy/charts/flyball-planner | grep '^version:' | awk '{print $2}')
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
          echo "Current chart version: $CHART_VERSION"

      - name: Check if chart version exists in gh-pages
        id: check-existing-version
        run: |
          # Check if this chart version already exists in the gh-pages branch
          if curl -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts/index.yaml" | grep -q "version: ${{ env.CHART_VERSION }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Chart version ${{ env.CHART_VERSION }} already exists in gh-pages"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Chart version ${{ env.CHART_VERSION }} not found in gh-pages"
          fi

      - name: Determine if chart should be published
        id: should-publish
        run: |
          if [ "${{ env.IS_TAG_OR_DISPATCH }}" == "true" ]; then
            # Tag pushes or repository dispatch: always publish (will update appVersion and overwrite)
            echo "publish=true" >> $GITHUB_OUTPUT
            echo "Chart should be published (tag push or repository dispatch - will update appVersion)"
          elif [ "${{ steps.check-existing-version.outputs.exists }}" == "false" ]; then
            # Regular pushes: only publish if version doesn't exist
            echo "publish=true" >> $GITHUB_OUTPUT
            echo "Chart should be published (new version not in gh-pages)"
          else
            echo "publish=false" >> $GITHUB_OUTPUT
            echo "No chart publishing needed (version already exists in gh-pages)"
          fi

      - name: Update app version for tags
        if: env.IS_TAG_OR_DISPATCH == 'true' && steps.should-publish.outputs.publish == 'true'
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # Extract version from client payload (keep the 'v' prefix)
            TAG_VERSION=${{ github.event.client_payload.ref }}
          else
            # Extract from git ref (keep the 'v' prefix)
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          fi

          sed -i "s/^appVersion: .*/appVersion: \"$TAG_VERSION\"/" deploy/charts/flyball-planner/Chart.yaml
          echo "Updated app version to $TAG_VERSION"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git fetch origin main
          git checkout main
          git add deploy/charts/flyball-planner/Chart.yaml
          git commit -m "Update appVersion to $TAG_VERSION for chart version ${{ env.CHART_VERSION }}"
          git push origin main
          echo "✅ Committed appVersion update to $TAG_VERSION"

      - name: Package Helm chart
        if: steps.should-publish.outputs.publish == 'true'
        run: |
          helm package deploy/charts/flyball-planner --destination ./charts
          echo "Packaged chart version ${{ env.CHART_VERSION }}"

      - name: Upload Helm chart
        if: steps.should-publish.outputs.publish == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ env.CHART_VERSION }}
          path: ./charts/*.tgz

      - name: Publish Helm chart to GitHub Pages
        if: steps.should-publish.outputs.publish == 'true'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          git clone https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
          cd gh-pages

          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi

          mkdir -p charts
          cp ../charts/*.tgz charts/

          # For tag pushes or repository dispatch, allow overwriting existing chart versions
          if [ "${{ env.IS_TAG_OR_DISPATCH }}" == "true" ]; then
            helm repo index charts --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts/ --merge index.yaml
            if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
              COMMIT_MSG="Update Helm chart ${{ env.CHART_VERSION }} with appVersion ${{ github.event.client_payload.ref }}"
            else
              COMMIT_MSG="Update Helm chart ${{ env.CHART_VERSION }} with appVersion ${{ github.ref_name }}"
            fi
          else
            helm repo index charts --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts/
            COMMIT_MSG="Add Helm chart ${{ env.CHART_VERSION }}"
          fi

          git add charts/
          git commit -m "$COMMIT_MSG" || exit 0
          git push origin gh-pages
          echo "✅ Published Helm chart version ${{ env.CHART_VERSION }}"
