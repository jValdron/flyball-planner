---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flyball-planner.fullname" . }}-graphql
  labels:
    {{- include "flyball-planner.labels" . | nindent 4 }}
    app.kubernetes.io/component: graphql
spec:
  replicas: {{ .Values.graphql.replicaCount }}
  selector:
    matchLabels:
      {{- include "flyball-planner.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: graphql
  template:
    metadata:
      labels:
        {{- include "flyball-planner.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: graphql
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox
          command: ["sh", "-c", "until nc -z {{ .Values.graphql.env.DB_HOST }} {{ .Values.graphql.env.DB_PORT }}; do echo waiting for database; sleep 2; done;"]
      containers:
        - name: graphql
          image: {{ .Values.graphql.image.repository }}:{{ .Values.graphql.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.graphql.image.pullPolicy }}
          ports:
            - containerPort: 4000
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: NODE_ENV
              value: {{ .Values.graphql.env.NODE_ENV }}
            - name: PORT
              value: "4000"
            - name: ALLOWED_ORIGINS
              value: {{ .Values.graphql.env.ALLOWED_ORIGINS }}
            - name: DB_USER
              value: {{ .Values.graphql.env.DB_USER }}
            - name: DB_NAME
              value: {{ .Values.graphql.env.DB_NAME }}
            - name: DB_HOST
              value: {{ .Values.graphql.env.DB_HOST }}
            - name: DB_PORT
              value: "{{ .Values.graphql.env.DB_PORT }}"
            - name: DB_SSLMODE
              value: {{ .Values.graphql.env.DB_SSLMODE }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.graphql.secret.existingSecret | default (printf "%s-postgresql-secret" (include "flyball-planner.fullname" .)) }}
                  key: password
            {{- if .Values.graphql.jwtSecret.enabled }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.graphql.jwtSecret.existingSecret | default (printf "%s-jwt-secret" (include "flyball-planner.fullname" .)) }}
                  key: jwt-secret
            {{- end }}
