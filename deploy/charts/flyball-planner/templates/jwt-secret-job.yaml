{{- if and .Values.graphql.jwtSecret.enabled (not .Values.graphql.jwtSecret.existingSecret) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "flyball-planner.fullname" . }}-jwt-secret-generator
  labels:
    {{- include "flyball-planner.labels" . | nindent 4 }}
    app.kubernetes.io/component: jwt-secret-generator
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "flyball-planner.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: jwt-secret-generator
    spec:
      serviceAccountName: {{ include "flyball-planner.fullname" . }}-jwt-secret-generator
      restartPolicy: Never
      containers:
      - name: jwt-secret-generator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e

          SECRET_NAME="{{ include "flyball-planner.fullname" . }}-jwt-secret"
          NAMESPACE="{{ .Release.Namespace }}"
          HOOK_TYPE="{{ .Release.Hook }}"

          echo "JWT Secret Management Job - Hook Type: $HOOK_TYPE"
          echo "Secret Name: $SECRET_NAME"
          echo "Namespace: $NAMESPACE"

          if [ "$HOOK_TYPE" = "post-delete" ]; then
            echo "Post-delete hook: Attempting to delete JWT secret '$SECRET_NAME'..."

            if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
              echo "JWT secret '$SECRET_NAME' exists, deleting..."
              kubectl delete secret "$SECRET_NAME" -n "$NAMESPACE"
              echo "JWT secret '$SECRET_NAME' deleted successfully."
            else
              echo "JWT secret '$SECRET_NAME' does not exist, nothing to delete."
            fi

            echo "JWT secret cleanup completed successfully."
            exit 0
          fi

          echo "Checking if JWT secret '$SECRET_NAME' already exists..."

          if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
            echo "JWT secret '$SECRET_NAME' already exists, skipping generation."
            exit 0
          fi

          echo "JWT secret '$SECRET_NAME' does not exist, generating new secret..."

          JWT_SECRET=$(openssl rand -base64 48 | tr -d "=+/" | cut -c1-64)

          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=jwt-secret="$JWT_SECRET" \
            -n "$NAMESPACE" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "JWT secret '$SECRET_NAME' created successfully."


          echo "JWT secret generation completed successfully."
        resources:
          limits:
            memory: "64Mi"
            cpu: "100m"
          requests:
            memory: "32Mi"
            cpu: "50m"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
{{- end }}
